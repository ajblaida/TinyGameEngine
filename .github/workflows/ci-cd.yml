name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE: 'TinyGameEngine.Packages.sln'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_FILE }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: ./TestResults
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: tinygameengine:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  package:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore
      
    - name: Pack NuGet packages with release tag version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        # Remove 'v' prefix if present (e.g., v1.0.0 -> 1.0.0)
        VERSION=${VERSION#v}
        echo "Using version: $VERSION"
        dotnet pack src/TinyGameEngine.Core --configuration Release --no-build --output ./packages /p:PackageVersion=$VERSION
        dotnet pack src/TinyGameEngine.ReferenceImpl --configuration Release --no-build --output ./packages /p:PackageVersion=$VERSION
      env:
        GITHUB_REF: ${{ github.ref }}
      
    - name: Upload NuGet packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg
      
    - name: Publish to NuGet (if secrets are available)
      run: |
        dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerable-packages.txt
        if grep -q "has the following vulnerable packages" vulnerable-packages.txt; then
          echo "Vulnerable packages found!"
          cat vulnerable-packages.txt
          exit 1
        else
          echo "No vulnerable packages found."
        fi
